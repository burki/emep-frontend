{% block map %}
    {% import 'Shared/map-leaflet.html.twig' as map %}
    <script>
        {{ map.defineColorIcons() }}
    </script>

    {% set deathPlace = person.deathPlaceInfo(app.request.locale) %}
    {% set birthPlace = person.birthPlaceInfo(app.request.locale) %}

    {% if birthPlace.geo is not empty or deathPlace.geo is not empty %}
        <div id="map" class="col-sm-12" style="width: 100%; min-height: 320px;"></div>

        <script>
            function adjustMapSize() {
                /*
                $('#map').height(function(index, height) {
                    return window.innerHeight - $(this).offset().top;
                });
                */
            }

            $(window).resize(adjustMapSize);
            adjustMapSize();

            var birthDeathMarkers = [];
            var exhibitionMarkers = [];

            {% for geo, info in mapMarkers %}
                {% for group,entries in info['groupedEntries'] %}
                {% set icons = entries|column('icon')|unique %}
                {% set prepend = '' %}
                {% set append = '' %}
                {% if 1 == icons|length %}
                    {% set icon = icons[0] %}
                {% else %}
                    {% set icon = 'orangeIcon' %}
                {% endif %}
                {% if 'exhibition' == group %}
                    {% set prepend = '<b>Exhibitions:</b><br />' %}
                    {% if entries|length > 4 %}
                    {% set append = '<br/>' ~ (entries|length - 4)  ~ ' more' %}
                    {% set entries = entries|slice(0,4) %}
                    {% endif %}
                {% endif %}
                var marker = L.marker([ {{ geo }} ], { icon: {{ icon }} })
                        .bindTooltip({{ info.place.name|json_encode|raw }}, { className: 'my-tooltip' })
                        .bindPopup('{{ prepend|raw }}{{ entries|column('html')|join('<br/>')|raw }}{{ append|raw }}', { className: 'my-tooltip' })
                        ;
                {% if 'birthDeath' == group %}birthDeathMarkers.push(marker);{% endif %}
                {% if 'exhibition' == group %}exhibitionMarkers.push(marker);{% endif %}
                {% endfor %}
            {% endfor %}

            var layers = [];
            var overlays = {};

            if (birthDeathMarkers.length > 0) {
                var birthDeath = L.featureGroup(birthDeathMarkers);
                layers.push(birthDeath);
                overlays['Places of Birth and Death'] = birthDeath;
            }

            if (exhibitionMarkers.length > 0) {
                var exhibitions = L.featureGroup(exhibitionMarkers);
                layers.push(exhibitions);
                overlays['Exhibitions'] = exhibitions;
            }

            if (layers.length > 0) {
                var map = L.map('map',{
                    layers: layers
                });

                {% set mapKeys = mapMarkers|keys %}
                {% if 1 == mapKeys|length %}
                map.setView([ {{ mapKeys[0] }} ], 8);
                {% else %}
                var allMarkers = birthDeathMarkers.concat(exhibitionMarkers);
                var featureGroup = L.featureGroup(allMarkers);
                map.fitBounds(featureGroup.getBounds());
                {% endif %}

                {{ map.addTileLayer() }}

                L.control.layers({}, overlays).addTo(map);
            }
        </script>

        <script>
            var baseUrlMarkerImg = "{{ app.request.basepath }}/vendor/leaflet-color-markers/img/";
            var violetIcon = new L.Icon({
                iconUrl: baseUrlMarkerImg + 'marker-icon-2x-violet.png',
                shadowUrl: baseUrlMarkerImg + 'marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });
            var blackIcon = new L.Icon({
                iconUrl: baseUrlMarkerImg + 'marker-icon-2x-black.png',
                shadowUrl: baseUrlMarkerImg + 'marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

            var yellowIcon = new L.Icon({
                iconUrl: baseUrlMarkerImg + 'marker-icon-2x-yellow.png',
                shadowUrl: baseUrlMarkerImg + 'marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });

        </script>

    {% else %}
        <div class="no_data_block">
            <div>no map data available</div>
        </div>
    {% endif %}
{% endblock %}