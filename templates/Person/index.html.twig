{% extends 'Base/base.html.twig' %}

{% import 'Shared/helper.html.twig' as helper %}

{% block body %}

    <div class="w-container">

        <h1 class="heading">{{ pageTitle }}</h1>

        <div class="searchbarcontainer">
            <!--<form  class="filter" method="get" action="{{ path(app.request.attributes.get('_route')) }}"> -->
            <div class="searchbarinputcontainer">
                <input type="text" class="text-field-class w-input search-input input-text-search" placeholder="search" value="{{ stringPart }}">
                <select id="personSelector" class="text-field-class w-select end-selector"><option value="" selected="selected">select gender</option><option value="F">female</option><option value="M">male</option></select>
                <select id="countrySelector" class="text-field-class w-select middle-selector">
                    <option value>select country</option>
                    {% for abrriviation,countryname in countryArray %}
                        <option value="{{ abrriviation }}">{{ countryname }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="searchbuttoncontainer"><input type="submit" name="submit-filter" value="Search" class="submit-button w-button submit-filter-visible">
            </div>
            <!--</form>-->
        </div>

    </div>


    <div class="searchbarcontainer w-form hidden-form">

        <form class="filter exhibitionFilterForm indexForm" method="get" action="{{ path(app.request.attributes.get('_route')) }}">
            <div class="searchbarinputcontainer">
                {{ form_rest(form) }}
            </div>
            <div class="searchbuttoncontainer"><input type="submit" name="submit-filter" value="Search" class="submit-button w-button">
            </div>
        </form>
    </div>

    <div class="filter-combination-container">
        <div class="filters-heading">
            <div class="advanced-filters-title"><span class="advanced-filters-title-sign">+</span> Filters</div>
            <div class="advanced-filters-container" style="display:none">
                <div class="advanced-filters-selection">
                    <select id="advancedFilterType" class="text-field-class w-select">
                        <option value="birthYearArtist">birth year of artist</option>
                        <option value="deathYearArtist">death year of artist</option>
                        <option value="exhibitingCountries">exhibition countries</option>
                        <option value="orgBodyExhibition">org. body of exhibtion</option>

                    </select>
                </div>

                <div class="advanced-filters-birthDateRangeArtist">
                    <div id="advanced-filters-birthDateRangeArtist-range"></div>
                    <select class="advanced-filters-birthDateRangeArtist-start-year" class="text-field-class w-select">
                        <option value=""></option>
                        {% for i in minBirthYear..maxBirthYear %}
                            <option value="{{ i }}">{{ i }}</option>
                        {% endfor %}
                    </select>
                    <select class="advanced-filters-birthDateRangeArtist-end-year" class="text-field-class w-select">
                        <option value=""></option>
                        {% for i in minBirthYear..maxBirthYear %}
                            <option value="{{ i }}">{{ i }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="advanced-filters-deathDateRangeArtist" style="display: none;">
                    <div id="advanced-filters-deathDateRangeArtist-range"></div>
                    <select class="advanced-filters-deathDateRangeArtist-start-year" class="text-field-class w-select">
                        <option value=""></option>
                        {% for i in minDeathYear..maxDeathYear %}
                            <option value="{{ i }}">{{ i }}</option>
                        {% endfor %}
                    </select>
                    <select class="advanced-filters-deathDateRangeArtist-end-year" class="text-field-class w-select">
                        <option value=""></option>
                        {% for i in minDeathYear..maxDeathYear %}
                            <option value="{{ i }}">{{ i }}</option>
                        {% endfor %}
                    </select>
                </div>


            <div class="advanced-filters-exhibitingCountries" style="display:none">
                <select id="advanced-filters-exhibitingCountries-select" class="advanced-filters-exhibitingCountries-select text-field-class w-select">
                    <option value="">select country</option>
                    {% for abrriviation,countryname in countryArray %}
                        <option value="{{ abrriviation }}">{{ countryname }}</option>
                    {% endfor %}
                </select>
            </div>



            <div class="advanced-filters-orgBodyExhibition" style="display:none">
                <select class="advanced-filters-genderArtist-select text-field-class w-select" id="advanced-filters-orgBodyExhibition-select">
                    <option value>select org. body</option>
                    {% for org in organizerTypes %}
                        <option value="{{ org }}">{{ org }}</option>
                    {% endfor %}
                </select>
            </div>

            </div>
        </div>



            {# refactor as macro #}
            {% for countryAbbreviation in nationalities %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>nationality</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is equal to</div>
                        </div>
                        <div class="first-filter-term">
                            {# find country to text method #}
                            <div>{{ countryArray[countryAbbreviation]|capitalize }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove countryAbbr" data-country="{{ countryAbbreviation }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endfor %}

            {% if "true" in ids %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Checkbox Filter</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is</div>
                        </div>
                        <div class="first-filter-term">
                            <div>active</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove exhibition-ids-filter-remove" data-organizer="{{ organizer }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endif %}

            {% if birthDate['left_date'] %}

                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Birth date</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is in between</div>
                        </div>
                        <div class="first-filter-term">
                            <div>{{ birthDate['left_date']|date("Y") }} and {{ birthDate['right_date']|date("Y") }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove startDate" id="remove-birth-date-filter">
                            <div>remove</div>
                        </div>
                    </div>
                </div>

            {% endif %}

            {% if deathDate['left_date'] %}

                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Death date</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is in between</div>
                        </div>
                        <div class="first-filter-term">
                            <div>{{ deathDate['left_date']|date("Y") }} and {{ deathDate['right_date']|date("Y") }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove startDate" id="remove-death-date-filter">
                            <div>remove</div>
                        </div>
                    </div>
                </div>

            {% endif %}


            {% for nationality in exhibitionCountries %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>exhibiting in country</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is equal to</div>
                        </div>
                        <div class="first-filter-term">
                            {# find country to text method #}
                            <div>{{ countryArray[nationality]|capitalize }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove artistNationality" id="removeExhibitionCountry" data-exhibitionCountry="{{ nationality }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endfor %}


            {% for orgBody in organizerTypesQuery %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>exhibiting org. body</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is equal to</div>
                        </div>
                        <div class="first-filter-term">
                            <div>{{ orgBody }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove artistNationality" id="removeExhibitionOrgBody" data-orgBody="{{ orgBody }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endfor %}

        </div>
    </div>


    <script>
        $(document).ready(function() {

            // IMPLEMENT SAVE QUERY FUNCTIONALITY

            $('.w-input').keypress(function (e) {
                if (e.which == 13) {
                    $('.indexForm').submit();
                    return false;    //<---- Add this line
                }
            });

            function saveQuery() {
                // change action for saving current query
                $form = $('#saveQuery');

                // $form.attr('action', '{{ path('person-save') }}');
                $form.submit();
            }

            $('.save-query').on('click', function() {
                // console.log('should save query');
                saveQuery();
            });

            $('#saved-searches').on('change', function() {
                // console.log('changed');
                $form = $('#saveQuery');
                $form.attr('action', '{{ path(app.request.get('_route')) }}');
                $form.submit();
            });

            // END SAVE QUERY FUNCTIONALITY


            $('.searchbarinputcontainer input[type=text]').attr("placeholder", "search artist name");


            // ADVANED SEARCH FILTERS

            var rangeSliderBirthDateArtist = document.getElementById('advanced-filters-birthDateRangeArtist-range');
            var rangeSliderDeathDateArtist = document.getElementById('advanced-filters-deathDateRangeArtist-range');

            noUiSlider.create(rangeSliderBirthDateArtist, {

                range: {
                    'min': {{ minBirthYear }},
                    'max': {{ maxBirthYear }}
                },

                step: 1,

                // Handles start at ...
                start: [{{ exhibitionStartDate['left_date'] ? exhibitionStartDate['left_date']|date("Y") : minBirthYear }}, {{ exhibitionStartDate['left_date'] ? exhibitionStartDate['right_date']|date("Y") :maxBirthYear }}],

                // ... must be at least 300 apart
                margin: 0,

                // ... but no more than 600
                limit: 1000,

                // Display colored bars between handles
                connect: true,

                // Put '0' at the bottom of the slider
                //direction: 'rtl',
                orientation: 'horizontal',

                // Move handle on tap, bars are draggable
                behaviour: 'tap-drag',
                tooltips: true,
                format: wNumb({
                    decimals: 0
                }),


                pips: {
                    mode: 'range',
                    stepped: true,
                    density: 4
                }

            });

            noUiSlider.create(rangeSliderDeathDateArtist, {

                range: {
                    'min': {{ minDeathYear }},
                    'max': {{ maxDeathYear }}
                },

                step: 1,

                // Handles start at ...
                start: [{{ exhibitionStartDate['left_date'] ? exhibitionStartDate['left_date']|date("Y") : minDeathYear }}, {{ exhibitionStartDate['left_date'] ? exhibitionStartDate['right_date']|date("Y") :maxDeathYear }}],

                // ... must be at least 300 apart
                margin: 0,

                // ... but no more than 600
                limit: 1000,

                // Display colored bars between handles
                connect: true,

                // Put '0' at the bottom of the slider
                //direction: 'rtl',
                orientation: 'horizontal',

                // Move handle on tap, bars are draggable
                behaviour: 'tap-drag',
                tooltips: true,
                format: wNumb({
                    decimals: 0
                }),


                pips: {
                    mode: 'range',
                    stepped: true,
                    density: 4
                }
            });

            rangeSliderBirthDateArtist.noUiSlider.on('change', function(values){
                // console.log('UI Slider changed value: ', values);

                // set the form elements to value
                $('.advanced-filters-birthDateRangeArtist-start-year').val(Math.round(values[0]));
                $('.advanced-filters-birthDateRangeArtist-end-year').val(Math.round(values[1]));

            });

            rangeSliderDeathDateArtist.noUiSlider.on('change', function(values){
                // console.log('UI Slider changed value: ', values);

                // set the form elements to value
                $('.advanced-filters-deathDateRangeArtist-start-year').val(Math.round(values[0]));
                $('.advanced-filters-deathDateRangeArtist-end-year').val(Math.round(values[1]));

            });


            /* REMOVING ACTIONS */

            $('#removeExhibitionOrgBody').on('click', function() {
                // console.log('this data: ', $(this).attr('data-orgBody'));
                removeValueFromMultiSelect($(this).attr('data-orgBody'), "#person_filter_organizer_type");
                $( ".indexForm" ).submit();
            });

            $('#removeExhibitionCountry').on('click', function() {
                // console.log('this data: ', $(this).attr('data-exhibitionCountry'));
                removeValueFromMultiSelect($(this).attr('data-exhibitionCountry'), "#person_filter_country");
                $( ".indexForm" ).submit();
            });


            $('#remove-death-date-filter').on('click', function() {
                $('#person_filter_deathDate_left_date_year').val('');
                $('#person_filter_deathDate_left_date_month').val('');
                $('#person_filter_deathDate_left_date_day').val('');

                $('#person_filter_deathDate_right_date_year').val('');
                $('#person_filter_deathDate_right_date_month').val('');
                $('#person_filter_deathDate_right_date_day').val('');

                $( ".indexForm" ).submit();
            });


            $('#remove-birth-date-filter').on('click', function() {
                $('#person_filter_birthDate_left_date_year').val('');
                $('#person_filter_birthDate_left_date_month').val('');
                $('#person_filter_birthDate_left_date_day').val('');

                $('#person_filter_birthDate_right_date_year').val('');
                $('#person_filter_birthDate_right_date_month').val('');
                $('#person_filter_birthDate_right_date_day').val('');

                $( ".indexForm" ).submit();
            });





            function removeValueFromMultiSelect(valueToRemove, selector){
                var currIdArray = $(selector).val() ? $(selector).val() : [];
                var index = currIdArray.indexOf(valueToRemove);
                if (index !== -1) currIdArray.splice(index, 1);

                $(selector).val( currIdArray );
            }

            /* END REMOVE ACTIONS */


            $('.advanced-filters-title').on('click', function() {
                $('.advanced-filters-container').toggle();

                // toggle + / -  sign
                if($('.advanced-filters-title-sign').text() == '+'){
                    $('.advanced-filters-title-sign').text('-');
                }else{
                    $('.advanced-filters-title-sign').text('+');
                }
            });


            $('#advancedFilterType').on('change', function() {
                // console.log('something changed here: ', $(this).val());
                var currAdvancedFilterSelection = $(this).val();

                hideAllAdvancedFilterOptions();

                if( currAdvancedFilterSelection === "birthYearArtist" ){
                    $('.advanced-filters-birthDateRangeArtist').show();
                }else if( currAdvancedFilterSelection === "deathYearArtist" ){
                    $('.advanced-filters-deathDateRangeArtist').show();
                }else if( currAdvancedFilterSelection === "exhibitingCountries" ){
                    $('.advanced-filters-exhibitingCountries').show();
                }else if( currAdvancedFilterSelection === "orgBodyExhibition" ){
                    $('.advanced-filters-orgBodyExhibition').show();
                }
            });


            function hideAllAdvancedFilterOptions() {
                $('.advanced-filters-birthDateRangeArtist').hide();
                $('.advanced-filters-deathDateRangeArtist').hide();
                $('.advanced-filters-exhibitingCountries').hide();
                $('.advanced-filters-orgBodyExhibition').hide();
            }


            function setAdvancedCustomFilterValues() {
                // get currently visible filter options
                const currAdvancedFilterSelection = $('#advancedFilterType').val();

                // console.log('current filter: ', currAdvancedFilterSelection);

                if( currAdvancedFilterSelection === "birthYearArtist" ){
                    const startyear = $('.advanced-filters-birthDateRangeArtist-start-year').val();
                    const endyear = $('.advanced-filters-birthDateRangeArtist-end-year').val();

                    // console.log('startyear: ', startyear);
                    // console.log('endyear: ', endyear);

                    // check if set
                    if(startyear && endyear){
                        $('#person_filter_birthDate_left_date_year').val(startyear-1);
                        $('#person_filter_birthDate_left_date_month').val(12);
                        $('#person_filter_birthDate_left_date_day').val(31);

                        $('#person_filter_birthDate_right_date_year').val(endyear);
                        $('#person_filter_birthDate_right_date_month').val(12);
                        $('#person_filter_birthDate_right_date_day').val(31);
                    }
                }else if( currAdvancedFilterSelection === "deathYearArtist" ){
                    const startyear = $('.advanced-filters-deathDateRangeArtist-start-year').val();
                    const endyear = $('.advanced-filters-deathDateRangeArtist-end-year').val();

                    // check if set
                    if(startyear && endyear){
                        $('#person_filter_deathDate_left_date_year').val(startyear-1);
                        $('#person_filter_deathDate_left_date_month').val(12);
                        $('#person_filter_deathDate_left_date_day').val(31);

                        $('#person_filter_deathDate_right_date_year').val(endyear);
                        $('#person_filter_deathDate_right_date_month').val(12);
                        $('#person_filter_deathDate_right_date_day').val(31);
                    }
                }else if( currAdvancedFilterSelection === "exhibitingCountries" ){
                    addValueToMutliSelect($('#advanced-filters-exhibitingCountries-select').val(), '#person_filter_country');

                }else if( currAdvancedFilterSelection === "orgBodyExhibition" ){
                    addValueToMutliSelect($('#advanced-filters-orgBodyExhibition-select').val(), '#person_filter_organizer_type');
                }

            }


            // adding value to a multiselect field
            function addValueToMutliSelect(valueToAdd, selector){
                var currSelection = $(selector).val() ? $(selector).val() : [];
                currSelection.push(valueToAdd);

                currSelection = jQuery.unique(currSelection);
                $(selector).val(currSelection);
            }

            $('#personSelector').val('{{ gender }}');



            $('.countryAbbr').on('click', function () {
                var currSelection = $('#person_filter_nationality').val();
                var currCountry = $(this).data('country');
                // remove array element
                currSelection.splice($.inArray(currCountry, currSelection), 1);
                $('#person_filter_nationality').val(currSelection);
                // submit form
                $( ".exhibitionFilterForm" ).submit();
            });

            $('.organizer').on('click', function () {
                var currSelection = $('#exhibition_filter_organizer_type').val();
                var currCountry = $(this).data('organizer');
                // remove array element
                currSelection.splice($.inArray(currCountry, currSelection), 1);
                $('#exhibition_filter_organizer_type').val(currSelection);

                // submit form
                $( ".exhibitionFilterForm" ).submit();
            });



            $('.exhibitionFilterForm').on('submit', function (e) {
                // console.log('submiting now ....');

                setAdvancedCustomFilterValues();

                // countries
                var currSelectionCountries = $('#person_filter_nationality').val() !== null ? $('#person_filter_nationality').val() : [];
                var currCountrySelected = $('#countrySelector').val();
                currSelectionCountries.push(currCountrySelected);
                currSelectionCountries = jQuery.unique(currSelectionCountries);

                currSelectionCountries = currSelectionCountries.filter(Boolean)  //filters all non-true values ---> especially empty strings
                // console.log('countries; ', currSelectionCountries);
                $('#person_filter_nationality').val(currSelectionCountries);


                // organization type
                var currGender = $('#personSelector').val();

                $('#person_filter_gender').val(currGender);
            });

            $('.submit-filter-visible').on('click', function() {
                $( ".exhibitionFilterForm" ).submit();
            });
            $('.input-text-search').bind('input', function() {
                $('#person_filter_search').val($(this).val());
                // console.log('change event:', $(this).val());
            })
            // checkmark worker
            $('.checkmark').on('click', function() {
                // console.log('checkbox checked: ', $(this).data('id'));
                const currId = $(this).data('id').toString();
                var currIdArray = $('#person_filter_id').val() ? $('#person_filter_id').val() : [];


                if($(this).hasClass("checked")){
                    var index = currIdArray.indexOf(currId);
                    if (index > -1) {
                        currIdArray.splice(index, 1);
                    }
                }else{
                    currIdArray.push(currId);
                }

                $(this).toggleClass( "checked" );

                currIdArray = jQuery.unique(currIdArray);

                $('#person_filter_id').val( currIdArray );


                // rebuild paging urls
                setNewPagingURLs();
            });

            $('.advanced-search').on('click', function () {
                if(!$(this).hasClass('active')){
                    $(".checkmark").attr("style", "display:inline-block");;
                    $(".advanced-search-settings").show();
                }else{
                    $(".checkmark").attr("style", "display:none");;
                    $(".advanced-search-settings").hide();
                }

                $(this).toggleClass('active');
                $(".advanced-search-settings").toggleClass('active');
            });

            $('.checkbox-filter-button').on('click', function() {

                // add true to the filter array
                var currIdArray = $('#person_filter_id').val() ? $('#person_filter_id').val() : [];
                // currIdArray = jQuery.unique('true');

                if( currIdArray.length !== 0 ){
                    currIdArray.push('true');
                    $('#person_filter_id').val( currIdArray );
                    $( ".exhibitionFilterForm" ).submit();
                }
                // submit form
            });

            $('.exhibition-ids-filter-remove').on('click', function() {
                // remove true option from array
                var currIdArray = $('#person_filter_id').val() ? $('#person_filter_id').val() : [];
                var index = currIdArray.indexOf('true');
                if (index !== -1) currIdArray.splice(index, 1);

                $('#person_filter_id').val( currIdArray );
                // submit form
                $( ".exhibitionFilterForm" ).submit();
            });


            $('.download-csv').on('click', function() {
                var action = $('.exhibitionFilterForm').attr('action');
                // console.log('first action: ', action);
                $('.exhibitionFilterForm').attr('action', '{{ path('person-csv') }}');
                $('.exhibitionFilterForm').submit();
                // resetting action to old one
                $('.exhibitionFilterForm').attr('action', action);
            });


            // show checkmarks if filter is already set
            {% if ids|length > 0 %}
            $(".checkmark").attr("style", "display:inline-block");;
            $(".advanced-search-settings").show();
            {% endif %}

        });

        function setNewPagingURLs() {
            var pages = $(".pagination").find('a');
            for (j = 0; j<pages.length; j++){

                var componentsToDelete = [];

                var currPageURL = new URL(decodeURIComponent(pages[j].href));

                // console.log(currPageURL.searchParams);
                currPageURL.searchParams.forEach(function(param, key){
                    // console.log('param: ', param); console.log('key: ', key);
                    if(key.indexOf("person_filter[id]") >= 0 ){
                        componentsToDelete.push(key);
                    }else{
                        // creating url

                    }
                });

                for (i = 0; i < componentsToDelete.length; i++){
                    currPageURL.searchParams.delete(componentsToDelete[i]);
                }
                // console.log(new URL(decodeURIComponent(pages[i].href)).searchParams.getAll("exhibition_filter[id][1]"));
                // console.log(pages[i].href.searchParams.getAll("exhibition_filter[id]"));

                var exhibitionIdsVal = $('#person_filter_id').val() ? $('#person_filter_id').val() : [];
                for(i = 0; i < exhibitionIdsVal.length; i++){
                    currPageURL.searchParams.append( 'person_filter[id][' + i + ']', exhibitionIdsVal[i] );
                }

                // set page url
                pages[j].href = currPageURL;
            }
        }

    </script>


    <div class="contentcontainer w-container">


        <div class="listviewrow">

            {# tabs headers #}
            {% embed "Person/Parts/tabs-header-index.html.twig" %}
            {% endembed %}

            <div class="tab-content">
                {% embed "Person/Parts/tabcontent-person-list.html.twig" %}
                {% endembed %}

                {% embed "Person/Parts/tabcontent-map.html.twig" %}
                {% endembed %}

                {% embed "Person/Parts/tabcontent-stats-index.html.twig" %}
                {% endembed %}
            </div><!-- .tab-content -->
        </div>
    </div>


{% endblock %}
