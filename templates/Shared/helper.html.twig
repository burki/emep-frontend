{% macro exhibition_period(exhibition) %}
    {% apply spaceless %}
    {% if exhibition.displaydate is not empty %}
        {{ exhibition.displaydate }}
    {% else %}
        {{ daterangeincomplete(exhibition.startdate, exhibition.enddate) }}
        {% if exhibition.appendJulianDate() %}
            ({{ daterangeincomplete(exhibition.getStartdate(true), exhibition.getEnddate(true)) }} o.S.)
        {% endif %}
    {% endif %}
    {% endapply %}
{% endmacro %}

{% macro exhibition_itemexhibition_sort_control(exhibition) %}
    {% if not exhibition.isSortedByPerson %}
        {% set active = app.request.get('sort') %}
        <div class="sort-control">
        Sort by:
        <a href="{{ path('exhibition', { 'id': exhibition.id}) }}"{% if active != 'person' %} class="active"{% endif %}>Catalogue Order</a>
        <a href="{{ path('exhibition', { 'id': exhibition.id, 'sort': 'person' }) }}"{% if active == 'person' %} class="active"{% endif %}>Artist</a>
        </div>
    {% endif %}
{% endmacro %}

{% macro pagination_count(pagination) %}
    {# total items count #}
    <div class="count">
        {% set first = (pagination.getCurrentPageNumber - 1) * pagination.getItemNumberPerPage %}
        {% set total = pagination.getTotalItemCount %}
        {% set last = min(first + pagination.getItemNumberPerPage, total) %}
        {{ first + 1 }} - {{ last }} of  {{ total }}
    </div>
{% endmacro %}

{% macro pagination_sortable(pagination, title, key, defaultDirection = 'asc') %}
    {% set sortDirection = defaultDirection %}
    {% if app.request.get('sort') == key and app.request.get('direction') == defaultDirection %}
        {% if defaultDirection == 'desc' %}
            {% set sortDirection = 'asc' %}
        {% else %}
            {% set sortDirection = 'desc' %}
        {% endif %}
    {% endif %}
    {{ knp_pagination_sortable(pagination, title, key, {}, { 'direction': sortDirection }) }}
{% endmacro %}

{% macro itemexhibition_detail (catalogueEntry) %}
    {% if catalogueEntry.displaylocation is not null %}
    <div style="float: right">
        <span class="small" title="Gallery/Room" style="color:#333">{{ catalogueEntry.displaylocation }}</span>
    </div>
    {% endif %}
    {{ catalogueEntry.titleFull }}
    <span class="small">
        {% if catalogueEntry.displayDate is not empty %}{{ catalogueEntry.displayDate }}{% endif %}
        {% if catalogueEntry.isForsale %}<sup><i class="glyphicon glyphicon-asterisk" title="For Sale"></i></sup>{% endif %}
        {% if catalogueEntry.price is not empty %}<span title="Price as in Catalogue">{{ catalogueEntry.price }}</span>{% endif %}
    </span>
    <div class="small">
        {# show only icon but don't link image preview of cat entries #}
    {% if catalogueEntry.previewImg is not null %}
        {% set imgUrl = 'https://exhibitions05-15.kugb.univie.ac.at/uploads/' ~ catalogueEntry.previewImg.imgUrl('') %}
        {% set imgCaption = catalogueEntry.previewImg.caption %}
        {% if false %}<a href="{{ imgUrl }}" data-toggle="lightbox"{% if imgCaption is not empty %} data-footer="{{ imgCaption|escape('html_attr') }}"{% endif %}>{% endif %}
        <i class="glyphicon glyphicon-picture" title="Catalogue Illustration available"></i>
        {% if false %}</a>{% endif %}
    {% endif %}
    {{ catalogueEntry.typeParts }}
    {% if catalogueEntry.ownerFull is not empty %}
        <i style="color: #ccc" class="glyphicon glyphicon-user" title="Owner as in Catalogue"></i>
        {{ catalogueEntry.ownerFull }}
    {% endif %}
    {% if catalogueEntry.description is not empty %}
        <i style="color: #ccc" class="glyphicon glyphicon-info-sign"></i>
        {{ catalogueEntry.description|nl2br }}
    {% endif %}
    </div>
{% endmacro %}

{% macro person_list_item(person) %}
    <a href="{% if person.ulan is not empty %}{{ path('person-by-ulan', { 'ulan' : person.ulan }) }}{% elseif person.gnd is not empty %}{{ path('person-by-gnd', { 'gnd' : person.gnd }) }}{% else %}{{ path('person', { 'id' : person.id }) }}{% endif %}">
        <b>{{ person.fullname }}</b>
    </a>

    {% set birthPlace = person.birthPlaceInfo(app.request.locale) %}
    {% set deathPlace = person.deathPlaceInfo(app.request.locale) %}
    {% if birthPlace is not empty or person.birthDate is not empty
       or deathPlace is not empty or person.deathDate is not empty %}
        ({% if birthPlace is not empty or person.birthDate is not empty %}
                {{ person.birthDate|dateincomplete -}}
                {% if birthPlace is not empty %}{% if person.birthDate is not empty %}{{- ',' }}{% endif %}
                    {% if birthPlace.id is not empty %}
                        <a href="{% if birthPlace.tgn is not empty %}{{ path('place-by-tgn', { 'tgn' : birthPlace.tgn }) }}{% else %}{{ path('place', { 'id' : birthPlace.id }) }}{% endif %}">
                        {{ birthPlace['name'] }}
                        </a>
                    {% else %}
                        {{ birthPlace['name'] }}
                    {% endif %}
                {% endif %}
        {% endif %}
        {% if deathPlace is not empty or person.deathDate is not empty %}
            &ndash;
                {{ person.deathDate|dateincomplete -}}
                {% if deathPlace is not empty %}{% if person.deathDate is not empty %}{{- ',' }}{% endif %}
                    {% if deathPlace.id is not empty %}
                        <a href="{% if deathPlace.tgn is not empty %}{{ path('place-by-tgn', { 'tgn' : deathPlace.tgn }) }}{% else %}{{ path('place', { 'id' : deathPlace.id }) }}{% endif %}">
                        {{ deathPlace['name'] }}
                        </a>
                    {% else %}
                        {{ deathPlace['name'] }}
                    {% endif %}
                {% endif %}
        {% endif %})
    {% endif %}
{% endmacro %}

{% macro place_linked(place) -%}
    <a href="{% if place.tgn is not empty %}{{ path('place-by-tgn', { 'tgn' : place.tgn }) }}{% else %}{{ path('place', { 'id' : place.id }) }}{% endif %}">{{ place.nameLocalized(app.request.locale) }}</a>
{%- endmacro %}

{% macro person_linked(person, givenNameFirst) -%}
    <a href="{% if person.ulan is not empty %}{{ path('person-by-ulan', { 'ulan' : person.ulan }) }}{% elseif person.gnd is not empty %}{{ path('person-by-gnd', { 'gnd' : person.gnd }) }}{% else %}{{ path('person', { 'id' : person.id }) }}{% endif %}">{{ person.fullname(givenNameFirst|default(false)) }}</a>
{%- endmacro %}

{% macro person_linked_anchor(person) -%}
    <a href="#person-{{ person.id }}">{{ person.fullname }}</a>
{%- endmacro %}

{% macro location_linked(location) -%}
    <a href="{{ path('location', { 'id' : location.id }) }}">{{ location.nameAppend ? location.nameAppend : location.name }}</a>
{%- endmacro %}

{% macro organizer_linked(location) -%}
    <a href="{{ path('organizer', { 'id' : location.id }) }}">{{ location.nameAppend ? location.nameAppend : location.name }}</a>
{%- endmacro %}

{% macro organizer_disclaimer() -%}
    <a class="tooltipDisclaimer" style="font-size: 1.2rem" data-toggle="tooltip" data-original-title="Organizing Bodies have mostly been compiled by deduction from the catalogues. However persons and/or institutions involved in the organizing of exhibitions are not always mentioned in the catalogue. Therefore their naming can be incomplete or erroneous.">
        <i style="color: #ccc" class="glyphicon glyphicon-info-sign"></i>
    </a>
    <script>
        $(function () {
            $('a.tooltipDisclaimer').tooltip({
                html: true,
                placement: 'auto left'
            });
        });
    </script>
{%- endmacro %}

{% macro holder_disclaimer() -%}
    <a class="tooltipDisclaimer" style="font-size: 1.2rem" data-toggle="tooltip" data-original-title="The following list contains the institutions which are holding the exhibition catalogues that were used as sources in our database.">
        <i style="color: #ccc" class="glyphicon glyphicon-info-sign"></i>
    </a>
    <script>
        $(function () {
            $('a.tooltipDisclaimer').tooltip({
                html: true,
                placement: 'auto left'
            });
        });
    </script>
{%- endmacro %}

{% macro render_info(entries) -%}
    {% for entry in entries %}
        {{ entry.note }}
        {% if entry.citation is not empty %}{{ entry.citation|raw }}{% endif %}
        {% if entry.url is not empty %}{{ entry.url|converturls }}{% endif %}
        {% if not loop.last %}<br />{% endif %}
    {% endfor %}
{% endmacro %}

{% macro render_types_of_work_count(catalogueEntriesByTypeCount) %}
    {% if catalogueEntriesByTypeCount is not empty %}
    <div class="artist-information-text-stats">Types of Work:
        {% for label,count in catalogueEntriesByTypeCount %}{% if not loop.first %}, {% endif %}
            {{ label }}: {{ count }}
        {%- endfor %}
    </div>
    {% endif %}
{% endmacro %}

{% macro render_citation(name, lastModified, url) -%}
    <div class="citation">
        <b>Recommended Citation:</b>
        "{{ name }}." In <i>{{ siteName|trans|replace({' | ':  '. '}) }}</i>.
        Last modified {{ lastModified|date('M j, Y') }}. <a href="{{ url }}">{{ url }}</a>
    </div>
{% endmacro%}

{% macro render_exhibition_citation(exhibition) -%}
    {{ _self.render_citation(exhibition.titleListing, exhibition.dateModified, url('exhibition', { 'id' : exhibition.id })) }}
{% endmacro%}

{% macro render_person_citation(person) -%}
    {% set routeInfo = person.routeInfo %}
    {{ _self.render_citation(person.fullName(true), person.dateModified, url(routeInfo[0], routeInfo[1])) }}
{% endmacro%}

{% macro render_place_citation(place) -%}
    {{ _self.render_citation(place.nameLocalized, place.dateModified, url('place-by-tgn', { 'tgn' : place.tgn })) }}
{% endmacro%}

{% macro render_location_citation(location) -%}
    {% set route = 'location' %}
    {% if location.exhibitions is empty and location.organizerOf is not empty %}{% set route = 'organizer' %}{% endif %}
    {{ _self.render_citation(location.nameListing, location.dateModified, url(route, { 'id' : location.id })) }}
{% endmacro%}

{% macro render_holder_citation(holder) -%}
    {{ _self.render_citation(holder.nameListing, holder.dateModified, url('holder', { 'id' : holder.id })) }}
{% endmacro%}

{% macro active_tab_from_hash(entries) %}
    <script>
    // Javascript to enable link to tab with anchor
    // https://stackoverflow.com/a/17552459
    var url = document.location.toString();
    if (url.match('#')) {
        $('.nav-tabs a[href="#'+url.split('#')[1]+'"]').tab('show') ;
    }

    // With HTML5 history API, we can easily prevent scrolling!
    $('.nav-tabs a').on('shown.bs.tab', function (e) {
        if (history.pushState) {
            history.pushState(null, null, e.target.hash);
        } else {
            window.location.hash = e.target.hash; //Polyfill for old browsers
        }
    })
    </script>
{% endmacro %}

{% macro show_detailmodal() %}
    {# modal for detailed info about clicked data #}
    <div id="detailModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Loading....</p>
                </div>
                <!--
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
                -->
            </div>
        </div>
    </div>
{% endmacro %}

{% macro seealso_head_gnd() %}
    <script src="{{ app.request.basepath }}/js/seealso.js"></script>
    <script>
        var service = new SeeAlsoCollection();
        service.services = {
            'pndaks' : new SeeAlsoService('https://juedische-geschichte-online.net/lod-resolver/seealso/findbuch/seealso/pnd-aks/-lemo@ap/-dome{% if person.wikidata is not empty %}/-wikidata{% endif %}')
        };
        service.views = {
            'seealso-ul' : new SeeAlsoUL({
                linkTarget: '_blank',
                maxItems: 100
            })
        };
        service.replaceTagsOnLoad();
    </script>
{% endmacro %}

{% macro seemore_head_gnd() %}
    <script src="{{ app.request.basepath }}/js/seealso.js"></script>
    <script>
        var service = new SeeAlsoCollection();
        service.services = {
            'gndaks' : new SeeAlsoService('https://juedische-geschichte-online.net/lod-resolver/seealso/findbuch/seemore/gnd-aks/-dewp@wd')
        };
        service.views = {
            'seealso-ul' : new SeeAlsoUL({
                linkTarget: '_blank',
                maxItems: 100
            })
        };
        service.replaceTagsOnLoad();
    </script>
{% endmacro %}

{% macro checkmark_actions(entity) %}
    // checkmark worker
    var active = Cookies.getJSON('{{ entity }}');
    if (!(active instanceof Array)) {
        active = [];
    }
    for (var i = 0; i < active.length; i++) {
        $('span.checkmark[data-id="' + active[i] + '"]').addClass('checked');
    }

    $('.checkbox-filter-button').on('click', function() {
        if (active.length !== 0 ) {
            {% if 'Venue' == entity %}{% set selector = 'location' %}{% else %}{% set selector = entity|lower %}{% endif %}
            var select2selector = '#filter_{{ selector }}_{{ selector }}';
            // remove anything active
            $(select2selector).val(null).trigger('change');
            for (var i = 0; i < active.length; i++) {
                // add new
                var $newOption = $("<option selected='selected'></option>").val(active[i]).text(active[i]);
                $(select2selector).append($newOption).trigger('change');
            }

            // submit form
            $('.indexForm').submit();
        }
    });

    $('.checkmark').on('click', function() {
        var currId = $(this).data('id');
        if (-1 == currId) {
            if (active.length > 0) {
                // deselect all
                $('.checkmark.checked').removeClass('checked');
                active = [];
            }
            else {
                // select all
                $('.checkmark').each(function (idx) {
                    var dataId = $(this).data('id');
                    if (-1 != dataId) {
                        $(this).addClass('checked');
                        active.push(dataId);
                    }
                });
            }
        }
        else {
            var index = active.indexOf(currId);
            if ($(this).hasClass('checked')) {
                // remove
                if (index > -1) {
                    active.splice(index, 1);
                }
            }
            else {
                // add
                if (index == -1) {
                    active.push(currId);
                }
            }

            $(this).toggleClass('checked');
        }


        Cookies.set('{{ entity }}', active);
    });
{% endmacro %}

{% macro indexform_actions(saveRoute) %}
        $(document).ready(function() {
            $('.w-input').keypress(function (e) {
                if (e.which == 13) {
                    $('.indexForm').submit();

                    return false;
                }
            });

            function saveQuery() {
                // change action for saving current query
                $form = $('.indexForm');

                $form.attr('action', '{{ path(saveRoute) }}');
                $form.submit();
            }

            $('.save-query').on('click', function() {
                saveQuery();
            });
        });
{% endmacro %}

{% macro show_savedsearches(searches) %}
    {% if app.user and searches is not empty %}
            <form action="{{ path(app.request.get('_route')) }}" method="POST">
                <select name="useraction" id="saved-searches" class="w-input select-queries" onchange="this.form.submit()">
                    <option value="">- Select Saved Query -</option>
                    {% for id, label in searches %}
                        <option value="{{ id }}">{{ label }}</option>
                    {% endfor %}
                </select>
            </form>
    {% endif %}
    <div class="icontab save-query"><img src="{{ app.request.basepath }}/img/save_icon.svg" class="iconimage" title="save your current query"></div>
{% endmacro %}

{% macro render_active_filters(listBuilder, form, entityLabels) %}
            {# render active filters #}
            <div class="additional-filter-container">
                {% for entity,filters in listBuilder.queryFilters %}
                    <div class="filter-row"><div class="div-block-5">{{ entityLabels[entity] }}</div></div>
                    {% for key,val in filters %}
                        {% set fieldVars = form[entity][key].vars %}
                        {% set fieldVal = fieldVars.value %}
                        {% set label = fieldVars.label %}
                        {% if label is empty %}{% set label = key|humanize %}{% endif %}
                        {% set relation = 'equal to' %}
                        {% if fieldVal is iterable and fieldVal|length > 1 %}
                            {% set relation = 'one of' %}
                        {% endif %}

                        {% set displayVal = fieldVal %}
                        {% if fieldVars.choices is not empty %}
                            {% if fieldVal is not iterable %}
                                {% set fieldVal = [ fieldVal ] %}
                            {% endif %}
                            {% set choiceLabels = []  %}
                            {% for choiceVal in fieldVal %}
                                {% set choiceLabel = choiceVal %}
                                {% set break = false %}
                                {% for choice in fieldVars.choices %}
                                    {% if not break and choice.value == choiceVal %}
                                        {% set choiceLabel = choice.label %}
                                        {% set break = true %}
                                    {% endif %}
                                {% endfor %}
                                {% set choiceLabels = choiceLabels|merge([ choiceLabel ]) %}
                            {% endfor %}
                            {% set displayVal = choiceLabels|join(', ') %}
                        {% elseif fieldVal is iterable %}
                            {% if form[entity][key].children|length > 0 %}
                                {% set relation = 'within the range' %}
                                {% set displayVal = fieldVal|join('-') %}
                            {% else %}
                                {% set displayVal = fieldVal|join('; ') %}
                            {% endif %}
                        {% else %}
                            {{ fieldVal }}
                        {% endif %}

                        <div class="filter-row">
                            <div class="div-block-5">
                                <div class="first-filter-term">
                                    <div>{{ label }}</div>
                                </div>
                                <div class="is_equal_to">
                                    <div>
                                        is {{ relation }}
                                    </div>
                                </div>
                                <div class="first-filter-term">
                                    <div>
                                        {{ displayVal }}
                                    </div>
                                </div>
                            </div>
                            <div class="subfilter-buttons-container">
                                {% set filtersRemaining = listBuilder.queryFilters(true)|without(entity) %}
                                {% set filtersEntityRemaining = filters|without(key) %}
                                {% if filtersEntityRemaining is not empty %}
                                    {% set filtersRemaining = filtersRemaining|merge({ (entity) : filtersEntityRemaining }) %}
                                {% endif %}
                                {% set params = app.request.attributes.get('_route_params')|merge(app.request.query.all|without('filter')) %}
                                {% if filtersRemaining is not empty %}
                                    {% set params = params|merge({ 'filter': filtersRemaining }) %}
                                {% endif %}
                                <a class="subfilter-remove" href="{{ path(app.request.attributes.get('_route'), params) }}">remove</a>
                            </div>
                        </div>
                    {% endfor %}
                {% endfor %}
            </div><!-- .additional-filter-container -->
{% endmacro %}