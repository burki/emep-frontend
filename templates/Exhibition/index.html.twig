{% extends 'Base/base.html.twig' %}

{% import 'Shared/helper.html.twig' as helper %}

{% block head %}
    {% import 'Shared/select2.html.twig' as select2 %}
    {{ select2.head() }}

    <script src="{{ app.request.basepath }}/js/js.cookie.js"></script>

    <script>
        $(document).ready(function() {
            // initialize select2
            $('.select2').select2();
            {{ helper.checkmark_actions(listBuilder.entity) }}
            {{ helper.indexform_actions('exhibition-save') }}
        });
    </script>

    {#% import 'Shared/datatables.html.twig' as datatables %}
    {{ datatables.head() }#}
{% endblock %}

{% block body %}
    <h1 class="heading">{{ pageTitle }}</h1>

    <form class="filter exhibitionFilterForm indexForm" method="get" action="{{ path(app.request.attributes.get('_route')) }}">
    <div class="searchbarcontainer">
        <div class="searchbarinputcontainer">
            {{ form_widget(form.search) }}
            {{ form_widget(form.location.geoname) }}
            {{ form_widget(form.exhibition.organizer_type) }}
        </div>
        <div class="searchbuttoncontainer"><input type="submit" name="submit-filter" value="Search" class="submit-button w-button submit-filter-visible">
        </div>
    </div>

    <div class="searchbarcontainer w-form hidden-form">

    <form class="indexForm" method="get" action="{{ path(app.request.attributes.get('_route')) }}">
        <div class="searchbarcontainer">
            <div class="searchbarinputcontainer">
                {{ form_widget(form.search) }}
                {{ form_widget(form.location.geoname) }}
                {{ form_widget(form.exhibition.organizer_type) }}
            </div>
    </div>
    </form>

    {%  set startyear = startYear %}

    <div class="filter-combination-container">
        <div class="filters-heading">
            <div class="advanced-filters-title"><span class="advanced-filters-title-sign">+</span> Filters</div>
            <div class="advanced-filters-container" style="display:none">
                <div class="advanced-filters-selection">
                    <select id="advancedFilterType" class="text-field-class w-select">
                        <option value="startDateRangeExhibition">starting date range of exhibition</option>
                        <option value="nationalityArtist">nationality of artist</option>
                        <option value="genderArtist">gender of artist</option>
                    </select>
                </div>
                <div class="advanced-filters-startDateRangeExhibition">
                    <div id="advanced-filters-startDateRangeExhibition-range"></div>
                    <select class="advanced-filters-startDateRangeExhibition-startdate-year" class="text-field-class w-select">
                        <option value=""></option>
                        {% for i in minStartYear..maxStartYear %}
                            <option value="{{ i }}">{{ i }}</option>
                        {% endfor %}
                    </select>
                    <select class="advanced-filters-startDateRangeExhibition-enddate-year" class="text-field-class w-select">
                        <option value=""></option>
                        {% for i in minStartYear..maxStartYear %}
                            <option value="{{ i }}">{{ i }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="advanced-filters-nationalityArtist" style="display:none">
                    <select id="advanced-filters-nationalityArtist-select" class="advanced-filters-nationalityArtist-select text-field-class w-select">
                        <option value="">select country</option>
                        {% for abbreviation,countryname in countryArray %}
                            <option value="{{ abbreviation }}">{{ countryname }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="advanced-filters-genderArtist" style="display:none">
                    <select class="advanced-filters-genderArtist-select text-field-class w-select">
                        <option value>select gender</option>
                        <option value="F">female</option>
                        <option value="M">male</option>
                    </select>
                </div>
            </div>
        </div>


        {#  ADVANCED FILTERS  #}


        <div class="additional-filter-container">

            {# refactor as macro #}
            {% for countryAbbreviation in countries %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Country</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is equal to</div>
                        </div>
                        <div class="first-filter-term">
                            {# find country to text method #}
                            <div>{{ countryArray[countryAbbreviation|replace({'cc:' : ''})]|capitalize }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove countryAbbr" data-country="{{ countryAbbreviation }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endfor %}

            {# refactor as macro #}
            {% for organizer in organizerType %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Organizer Type</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is equal to</div>
                        </div>
                        <div class="first-filter-term">
                            <div>{{ organizer|capitalize }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove organizer" data-organizer="{{ organizer }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endfor %}



            {% for gender in artistGender %}
                {% set genderLong = gender == 'M' ? 'Male' : 'Female' %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Artist Gender</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is equal to</div>
                        </div>
                        <div class="first-filter-term">
                            <div>{{ genderLong }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove artistGender" id="removeArtistGender">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endfor %}

            {% for nationality in artistNationalities %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Artists' Nationality</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is equal to</div>
                        </div>
                        <div class="first-filter-term">
                            {# find country to text method #}
                            <div>{{ countryArray[nationality]|capitalize }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove artistNationality" id="removeArtistNationality" data-artistNationality="{{ nationality }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endfor %}



            {% if exhibitionStartDate['left_date'] %}

                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Exhibition Startdate</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is in between</div>
                        </div>
                        <div class="first-filter-term">
                            <div>{{ exhibitionStartDate['left_date']|date("Y") }} and {{ exhibitionStartDate['right_date']|date("Y") }}</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove startDate" id="remove-start-date-filter">
                            <div>remove</div>
                        </div>
                    </div>
                </div>

            {% endif %}


            {% if "true" in ids %}
                <div class="filter-row">
                    <div class="div-block-5">
                        <div class="first-filter-term">
                            <div>Checkbox Filter</div>
                        </div>
                        <div class="is_equal_to">
                            <div>is</div>
                        </div>
                        <div class="first-filter-term">
                            <div>active</div>
                        </div>
                    </div>
                    <div class="subfilter-buttons-container">
                        <div class="subfilter-remove exhibition-ids-filter-remove" data-organizer="{{ organizer }}">
                            <div>remove</div>
                        </div>
                    </div>
                </div>
            {% endif %}
        </div>
    </div>

    <script>
        $(document).ready(function() {

            $('.w-input').keypress(function (e) {
                if (e.which == 13) {
                    $('.indexForm').submit();
                    return false;    //<---- Add this line
                }
            });

            // IMPLEMENT SAVE QUERY FUNCTIONALITY

            function saveQuery() {
                // change action for saving current query
                $form = $('#saveQuery');

                // $form.attr('action', '{{ path('exhibition-save') }}');
                $form.submit();
            }

            $('.save-query').on('click', function() {
                // console.log('should save query');
                saveQuery();
            });

            $('#saved-searches').on('change', function() {
                // console.log('changed');
                $form = $('#saveQuery');
                $form.attr('action', '{{ path(app.request.get('_route')) }}');
                $form.submit();
            });

            // END SAVE QUERY FUNCTIONALITY


            // ADVANED SEARCH FILTERS

            var rangeSliderExhibitionStartDate = document.getElementById('advanced-filters-startDateRangeExhibition-range');

            noUiSlider.create(rangeSliderExhibitionStartDate, {

                range: {
                    'min': {{ minStartYear }},
                    'max': {{ maxStartYear }}
                },

                step: 1,

                // Handles start at ...
                start: [{{ exhibitionStartDate['left_date'] ? exhibitionStartDate['left_date']|date("Y") : minStartYear }}, {{ exhibitionStartDate['left_date'] ? exhibitionStartDate['right_date']|date("Y") :maxStartYear }}],

                // ... must be at least 300 apart
                margin: 0,

                // ... but no more than 600
                limit: 100,

                // Display colored bars between handles
                connect: true,

                // Put '0' at the bottom of the slider
                //direction: 'rtl',
                orientation: 'horizontal',

                // Move handle on tap, bars are draggable
                behaviour: 'tap-drag',
                tooltips: false,
                //format: ({
                //    decimals: 0
                //}),

                // Show a scale with the slider
                pips: {
                    mode: 'steps',
                    stepped: true,
                    density: 10
                }
            });

            rangeSliderExhibitionStartDate.noUiSlider.on('change', function(values){
                // console.log('UI Slider changed value: ', values);

                // set the form elements to value
                $('.advanced-filters-startDateRangeExhibition-startdate-year').val(Math.round(values[0]));
                $('.advanced-filters-startDateRangeExhibition-enddate-year').val(Math.round(values[1]));

            });


            $('.advanced-filters-title').on('click', function() {
                $('.advanced-filters-container').toggle();

                // toggle + / -  sign
                if($('.advanced-filters-title-sign').text() == '+'){
                    $('.advanced-filters-title-sign').text('-');
                }else{
                    $('.advanced-filters-title-sign').text('+');
                }
            });


            $('#advancedFilterType').on('change', function() {

                // console.log('something changed here: ', $(this).val());
                var currAdvancedFilterSelection = $(this).val();

                hideAllAdvancedFilterOptions();

                if( currAdvancedFilterSelection === "startDateRangeExhibition" ){
                    $('.advanced-filters-startDateRangeExhibition').show();
                }else if( currAdvancedFilterSelection === "nationalityArtist" ){
                    $('.advanced-filters-nationalityArtist').show();
                }else if( currAdvancedFilterSelection === "genderArtist" ){
                    $('.advanced-filters-genderArtist').show();
                }
            });


            /* REMOVE FUNCTIONS */

            $('#removeArtistGender').on('click', function() {
                $('#filter_gender').val('');
                $( ".indexForm" ).submit();
            })

            $('#removeArtistNationality').on('click', function() {
                // console.log('this data: ', $(this).attr('data-artistNationality'));
                removeValueFromMultiSelect($(this).attr('data-artistNationality'), "#filter_nationality");
                $( ".indexForm" ).submit();
            });

            $('#remove-start-date-filter').on('click', function() {
                $('#filter_startdate_left_date_year').val('');
                $('#filter_startdate_left_date_month').val('');
                $('#filter_startdate_left_date_day').val('');

                $('#filter_startdate_right_date_year').val('');
                $('#filter_startdate_right_date_month').val('');
                $('#filter_startdate_right_date_day').val('');

                $( ".indexForm" ).submit();
            });

            /* END REMOVE FUNCTIONS */

            function hideAllAdvancedFilterOptions() {
                $('.advanced-filters-startDateRangeExhibition').hide();
                $('.advanced-filters-nationalityArtist').hide();
                $('.advanced-filters-genderArtist').hide();
            }

            function setAdvancedCustomFilterValues() {
                // get currently visible filter options
                const currAdvancedFilterSelection = $('#advancedFilterType').val();

                // console.log('current filter: ', currAdvancedFilterSelection);

                if( currAdvancedFilterSelection === "startDateRangeExhibition" ){
                    //set date current start end enddate
                    const startyear = $('.advanced-filters-startDateRangeExhibition-startdate-year').val();
                    const endyear = $('.advanced-filters-startDateRangeExhibition-enddate-year').val();

                    // check if set
                    if(startyear && endyear){
                        $('#filter_startdate_left_date_year').val(startyear);
                        $('#filter_startdate_left_date_month').val(1);
                        $('#filter_startdate_left_date_day').val(1);

                        $('#filter_startdate_right_date_year').val(endyear);
                        $('#filter_startdate_right_date_month').val(12);
                        $('#filter_startdate_right_date_day').val(31);
                    }

                }else if( currAdvancedFilterSelection === "nationalityArtist" ){
                    // set/add natioanlity of Artist to current selection
                    addValueToMutliSelect($('#advanced-filters-nationalityArtist-select').val(), '#filter_nationality')

                }else if( currAdvancedFilterSelection === "genderArtist" ){
                    // set gender of artist
                    // console.log('current val of artist: ', $('.advanced-filters-genderArtist-select').val() );
                    $('#filter_gender').val( $('.advanced-filters-genderArtist-select').val() );

                }
            }

            function removeValueFromMultiSelect(valueToRemove, selector){
                var currIdArray = $(selector).val() ? $(selector).val() : [];
                var index = currIdArray.indexOf(valueToRemove);
                if (index !== -1) currIdArray.splice(index, 1);

                $(selector).val( currIdArray );
            }


            // adding value to a multiselect field
            function addValueToMutliSelect(valueToAdd, selector){
                var currSelection = $(selector).val() ? $(selector).val() : [];
                currSelection.push(valueToAdd);

                currSelection = jQuery.unique(currSelection);
                $(selector).val(currSelection);
            }


            // END ADVANCED SEARCH FILTERS


            // submitting form
            $('.exhibitionFilterForm').on('submit', function (e) {
                // console.log('submiting now ....');

                setAdvancedCustomFilterValues();
            });

            $('.submit-filter-visible').on('click', function() {
                $( ".indexForm" ).submit();
            });


            // checkmark worker
            $('.checkmark').on('click', function() {
                // console.log('checkbox checked: ', $(this).data('id'));
                const currId = $(this).data('id').toString();
                var currIdArray = $('#filter_id').val() ? $('#filter_id').val() : [];


                if($(this).hasClass("checked")){
                    var index = currIdArray.indexOf(currId);
                    if (index > -1) {
                        currIdArray.splice(index, 1);
                    }
                }else{
                    currIdArray.push(currId);
                }

                $(this).toggleClass( "checked" );

                currIdArray = jQuery.unique(currIdArray);

                $('#filter_id').val( currIdArray );


                // rebuild paging urls
                setNewPagingURLs();
            });

            $('.advanced-search').on('click', function () {
                if(!$(this).hasClass('active')){
                    $(".checkmark").attr("style", "display:inline-block");;
                    $(".advanced-search-settings").show();
                }else{
                    $(".checkmark").attr("style", "display:none");;
                    $(".advanced-search-settings").hide();
                }

                $(this).toggleClass('active');
                $(".advanced-search-settings").toggleClass('active');
            });

            $('.checkbox-filter-button').on('click', function() {
                // add true to the filter array
                var currIdArray = $('#filter_id').val() ? $('#filter_id').val() : [];

                // currIdArray = jQuery.unique('true');
                if( currIdArray.length !== 0 ){
                    currIdArray.push('true');
                    $('#filter_id').val( currIdArray );
                    $( ".indexForm" ).submit();
                }
                // submit form

            });

            $('.exhibition-ids-filter-remove').on('click', function() {
                // remove true option from array
                var currIdArray = $('#filter_id').val() ? $('#filter_id').val() : [];
                var index = currIdArray.indexOf('true');
                if (index !== -1) currIdArray.splice(index, 1);

                $('#filter_id').val( currIdArray );
                // submit form
                $( ".indexForm" ).submit();
            });

            // show checkmarks if filter is already set
            {% if ids|length > 0 %}
                $(".checkmark").attr("style", "display:inline-block");;
                $(".advanced-search-settings").show();
            {% endif %}

        });

        function setNewPagingURLs() {
            var pages = $(".pagination").find('a');
            for (j = 0; j<pages.length; j++){

                var componentsToDelete = [];

                var currPageURL = new URL(decodeURIComponent(pages[j].href));

                // console.log(currPageURL.searchParams);
                currPageURL.searchParams.forEach(function(param, key){
                    // console.log('param: ', param); console.log('key: ', key);
                    if(key.indexOf("exhibition_filter[id]") >= 0 ){
                        componentsToDelete.push(key);
                    }else{
                        // creating url

                    }
                });

                for (i = 0; i < componentsToDelete.length; i++){
                    currPageURL.searchParams.delete(componentsToDelete[i]);
                }
                // console.log(new URL(decodeURIComponent(pages[i].href)).searchParams.getAll("exhibition_filter[id][1]"));
                // console.log(pages[i].href.searchParams.getAll("exhibition_filter[id]"));

                var exhibitionIdsVal = $('#filter_id').val() ? $('#filter_id').val() : [];
                for(i = 0; i < exhibitionIdsVal.length; i++){
                    currPageURL.searchParams.append( 'exhibition_filter[id][' + i + ']', exhibitionIdsVal[i] );
                }

                // set page url
                pages[j].href = currPageURL;
            }
        }

    </script>


            <div class="searchbuttoncontainer"><input type="submit" name="submit-filter" value="Search" class="submit-button w-button submit-filter-visible">
            </div>
        </div>

        <div class="searchbarcontainer w-form hidden-form">
            <div class="searchbarinputcontainer">
                {{ form_rest(form) }}
            </div>
        </div>
    </form>

    <div class="contentcontainer w-container">
        <div class="listviewrow">
            {# tabs headers #}
            {% embed "Exhibition/Parts/tabs-header-index.html.twig" %}
            {% endembed %}

            <div class="tab-content">
                {% embed "Exhibition/Parts/tabcontent-exhibition-list.html.twig" %}
                {% endembed %}

                {% embed "Exhibition/Parts/tabcontent-map.html.twig" %}
                {% endembed %}

                {% embed "Exhibition/Parts/tabcontent-stats-index.html.twig" %}
                {% endembed %}
            </div><!-- .tab-content -->
        </div>
    </div>


    {% if 'placeSort' == sortField %}
        <script>
            $(document).ready(function() {
                var groupColumn = 2;
                var table = $('#exhibitions').DataTable({
                    "dom": 'ilrtp',
                    paging: false,
                    searching: false,
                    info: true,
                    "columnDefs": [
                        { "visible": false, "targets": groupColumn }
                    ],
                    "order": [[ groupColumn, 'asc' ]],
                    "displayLength": 25,
                    "drawCallback": function ( settings ) {
                        var api = this.api();
                        var rows = api.rows( {page:'current'} ).nodes();
                        var last=null;

                        api.column(groupColumn, {page:'current'} ).data().each( function ( group, i ) {
                            if ( last !== group ) {

                                $(rows).eq( i ).before(
                                    '<tr class="group groupHeader" data-name="' + group + '" ><td colspan="5"><span class="minus-collapse">-</span> '+group+'</td></tr>'
                                );

                                last = group;
                            }
                        } );
                    }
                } );


            } );
        </script>
    {% endif %}


    <script>
        $(document).ready(function() {
            // Order by the grouping
            $('#exhibitions tbody').on( 'click', 'tr.group', function () {
                var currentOrder = table.order()[0];

                var splitGroup = $(this).data('name');

                $('.collapseRow[data-rowname="' + splitGroup + '"]').toggleClass('collapsed');

                // console.log($(this).data('name'));
            });
        });
    </script>
{% endblock %}
